/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List assets */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of assets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatedAssets"];
                    };
                };
            };
        };
        put?: never;
        /** Create asset */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AssetCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Asset"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{assetId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assetId: string;
            };
            cookie?: never;
        };
        /** Get asset by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Asset details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Asset"];
                    };
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update asset */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AssetUpdate"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Asset"];
                    };
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete asset */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{assetId}/themes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assetId: string;
            };
            cookie?: never;
        };
        /** List themes for asset */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of themes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Theme"][];
                    };
                };
            };
        };
        put?: never;
        /** Create theme for asset */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ThemeCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Theme"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/themes/{themeId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                themeId: string;
            };
            cookie?: never;
        };
        /** Get theme by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    themeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Theme details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Theme"];
                    };
                };
                /** @description Theme not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update theme */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    themeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ThemeUpdate"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Theme"];
                    };
                };
            };
        };
        post?: never;
        /** Delete theme */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    themeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Theme not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/themes/{themeId}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                themeId: string;
            };
            cookie?: never;
        };
        /** List cards for theme */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    themeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of cards */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Card"][];
                    };
                };
            };
        };
        put?: never;
        /** Create card for theme */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    themeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CardCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Card"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/{cardId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cardId: string;
            };
            cookie?: never;
        };
        /** Get card by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Card details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Card"];
                    };
                };
            };
        };
        /** Update card */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CardUpdate"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Card"];
                    };
                };
            };
        };
        post?: never;
        /** Delete card */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scenarios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List scenarios */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of scenarios */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatedScenarios"];
                    };
                };
            };
        };
        put?: never;
        /** Create scenario */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ScenarioCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Scenario"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scenarios/{scenarioId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scenarioId: string;
            };
            cookie?: never;
        };
        /** Get scenario by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    scenarioId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Scenario details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Scenario"];
                    };
                };
            };
        };
        /** Update scenario */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    scenarioId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ScenarioUpdate"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Scenario"];
                    };
                };
            };
        };
        post?: never;
        /** Delete scenario */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    scenarioId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matrix": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get matrix analysis results */
        get: {
            parameters: {
                query?: {
                    assetId?: string;
                    scenarioId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Matrix analysis results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MatrixAnalysisResult"][];
                    };
                };
            };
        };
        put?: never;
        /** Request matrix analysis */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MatrixAnalysisRequest"];
                };
            };
            responses: {
                /** @description Analysis request accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            jobId?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search across assets and scenarios */
        get: {
            parameters: {
                query: {
                    query: string;
                    assetId?: string;
                    scenarioId?: string;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchResult"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Server-Sent Events (SSE) endpoint for real-time updates */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description SSE stream */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{assetId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assetId: string;
            };
            cookie?: never;
        };
        /** List access grants for asset */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Access grants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssetAccess"][];
                    };
                };
            };
        };
        put?: never;
        /** Grant access to asset */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AssetAccessCreate"];
                };
            };
            responses: {
                /** @description Access granted */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssetAccess"];
                    };
                };
            };
        };
        /** Remove access from asset */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AssetAccessRemove"];
                };
            };
            responses: {
                /** @description Access removed */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{assetId}/clone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assetId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone an asset template
         * @description Deep-clone an Asset template into the caller's workspace
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Template cloned successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Asset"];
                    };
                };
                /** @description Forbidden - No access to template */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Template not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/theme-templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List theme templates
         * @description Browse available theme templates
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of templates per page (max 50) */
                    limit?: number;
                    /** @description Search query for template name */
                    q?: string;
                    /** @description When true, returns only templates owned by the current user */
                    mine?: boolean;
                    /** @description When true, returns only public templates */
                    publicOnly?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of theme templates */
                200: {
                    headers: {
                        /** @description Number of requests remaining in the current rate limit window */
                        "X-RateLimit-Remaining"?: string;
                        /** @description Seconds to wait before retrying if rate limit reached */
                        "Retry-After"?: number;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatedThemeTemplates"];
                    };
                };
                /** @description Bad Request - Invalid parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                            details?: string[];
                        };
                    };
                };
                /** @description Too Many Requests - Rate limit exceeded */
                429: {
                    headers: {
                        /** @description Seconds to wait before retrying */
                        "Retry-After"?: number;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Rate limit exceeded */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create theme template
         * @description Publish a new theme template
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ThemeTemplateCreate"];
                };
            };
            responses: {
                /** @description Template created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ThemeTemplate"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/theme-templates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get theme template by ID
         * @description Retrieve a single theme template by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Theme template details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ThemeTemplate"];
                    };
                };
                /** @description Forbidden - No access to template */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Template not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update theme template
         * @description Update an existing theme template
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ThemeTemplateUpdate"];
                };
            };
            responses: {
                /** @description Template updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ThemeTemplate"];
                    };
                };
                /** @description Forbidden - Only owner can update */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Template not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete theme template
         * @description Delete a theme template
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Template deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Only owner can delete */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Template not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/theme-templates/{id}/clone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone a theme template
         * @description Clone a theme template into the specified asset
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ThemeTemplateClone"];
                };
            };
            responses: {
                /** @description Template cloned successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Asset: {
            id: string;
            name: string;
            description?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            userId: string;
        };
        AssetCreate: {
            name: string;
            description?: string;
        };
        AssetUpdate: {
            name?: string;
            description?: string;
        };
        Theme: {
            id: string;
            name: string;
            description?: string;
            assetId: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ThemeCreate: {
            name: string;
            description?: string;
        };
        ThemeUpdate: {
            name?: string;
            description?: string;
        };
        Card: {
            id: string;
            title: string;
            content?: string;
            themeId: string;
            order?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CardCreate: {
            title: string;
            content?: string;
            order?: number;
        };
        CardUpdate: {
            title?: string;
            content?: string;
            order?: number;
        };
        Scenario: {
            id: string;
            name: string;
            description?: string;
            parameters?: Record<string, never>;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ScenarioCreate: {
            name: string;
            description?: string;
            parameters?: Record<string, never>;
        };
        ScenarioUpdate: {
            name?: string;
            description?: string;
            parameters?: Record<string, never>;
        };
        MatrixAnalysisRequest: {
            assetIds: string[];
            scenarioIds: string[];
            options?: {
                includeConfidence?: boolean;
                includeDetails?: boolean;
            };
        };
        MatrixAnalysisResult: {
            id: string;
            matrix: {
                assetId?: string;
                scenarioId?: string;
                impact?: number;
                confidence?: number;
                details?: string;
            }[][];
            metadata?: {
                /** Format: date-time */
                computedAt?: string;
                totalCells?: number;
                averageConfidence?: number;
            };
        };
        AssetAccess: {
            id: string;
            assetId: string;
            userId: string;
            /** @enum {string} */
            permission: "read" | "write" | "admin";
            /** Format: date-time */
            grantedAt?: string;
            grantedBy?: string;
        };
        AssetAccessCreate: {
            userId: string;
            /** @enum {string} */
            permission: "read" | "write" | "admin";
        };
        AssetAccessRemove: {
            userId: string;
        };
        ThemeTemplate: {
            id: string;
            name: string;
            description?: string;
            template: Record<string, never>;
            isPublic?: boolean;
            ownerId: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ThemeTemplateCreate: {
            name: string;
            description?: string;
            template: Record<string, never>;
            /** @default false */
            isPublic: boolean;
        };
        ThemeTemplateUpdate: {
            name?: string;
            description?: string;
            template?: Record<string, never>;
            isPublic?: boolean;
        };
        ThemeTemplateClone: {
            assetId: string;
            name?: string;
        };
        SearchResult: {
            assets: components["schemas"]["Asset"][];
            themes: components["schemas"]["Theme"][];
            cards: components["schemas"]["Card"][];
            total: number;
        };
        PaginatedAssets: {
            data: components["schemas"]["Asset"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        PaginatedScenarios: {
            data: components["schemas"]["Scenario"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        PaginatedThemeTemplates: {
            data: components["schemas"]["ThemeTemplate"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        PaginationInfo: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
