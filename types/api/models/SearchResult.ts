/* tslint:disable */
/* eslint-disable */
/**
 * Finex Bot API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SearchResult
 */
export interface SearchResult {
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    type?: SearchResultTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    content?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchResult
     */
    score?: number;
    /**
     * Theme ID for cards, asset ID for themes
     * @type {string}
     * @memberof SearchResult
     */
    parentId?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    parentType?: SearchResultParentTypeEnum;
}


/**
 * @export
 */
export const SearchResultTypeEnum = {
    Card: 'card',
    Theme: 'theme'
} as const;
export type SearchResultTypeEnum = typeof SearchResultTypeEnum[keyof typeof SearchResultTypeEnum];

/**
 * @export
 */
export const SearchResultParentTypeEnum = {
    Theme: 'theme',
    Asset: 'asset'
} as const;
export type SearchResultParentTypeEnum = typeof SearchResultParentTypeEnum[keyof typeof SearchResultParentTypeEnum];


/**
 * Check if a given object implements the SearchResult interface.
 */
export function instanceOfSearchResult(value: object): value is SearchResult {
    return true;
}

export function SearchResultFromJSON(json: any): SearchResult {
    return SearchResultFromJSONTyped(json, false);
}

export function SearchResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchResult {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'content': json['content'] == null ? undefined : json['content'],
        'score': json['score'] == null ? undefined : json['score'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'parentType': json['parentType'] == null ? undefined : json['parentType'],
    };
}

export function SearchResultToJSON(json: any): SearchResult {
    return SearchResultToJSONTyped(json, false);
}

export function SearchResultToJSONTyped(value?: SearchResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'content': value['content'],
        'score': value['score'],
        'parentId': value['parentId'],
        'parentType': value['parentType'],
    };
}

