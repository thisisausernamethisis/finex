/* tslint:disable */
/* eslint-disable */
/**
 * Finex Bot API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Theme
 */
export interface Theme {
    /**
     * 
     * @type {string}
     * @memberof Theme
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Theme
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Theme
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Theme
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof Theme
     */
    themeType?: ThemeThemeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Theme
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof Theme
     */
    scenarioId?: string;
    /**
     * 
     * @type {number}
     * @memberof Theme
     */
    calculatedValue?: number;
    /**
     * 
     * @type {number}
     * @memberof Theme
     */
    manualValue?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Theme
     */
    useManualValue?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Theme
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Theme
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const ThemeThemeTypeEnum = {
    Standard: 'STANDARD',
    Growth: 'GROWTH',
    Probability: 'PROBABILITY'
} as const;
export type ThemeThemeTypeEnum = typeof ThemeThemeTypeEnum[keyof typeof ThemeThemeTypeEnum];


/**
 * Check if a given object implements the Theme interface.
 */
export function instanceOfTheme(value: object): value is Theme {
    return true;
}

export function ThemeFromJSON(json: any): Theme {
    return ThemeFromJSONTyped(json, false);
}

export function ThemeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Theme {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'category': json['category'] == null ? undefined : json['category'],
        'themeType': json['themeType'] == null ? undefined : json['themeType'],
        'assetId': json['assetId'] == null ? undefined : json['assetId'],
        'scenarioId': json['scenarioId'] == null ? undefined : json['scenarioId'],
        'calculatedValue': json['calculatedValue'] == null ? undefined : json['calculatedValue'],
        'manualValue': json['manualValue'] == null ? undefined : json['manualValue'],
        'useManualValue': json['useManualValue'] == null ? undefined : json['useManualValue'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function ThemeToJSON(json: any): Theme {
    return ThemeToJSONTyped(json, false);
}

export function ThemeToJSONTyped(value?: Theme | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'category': value['category'],
        'themeType': value['themeType'],
        'assetId': value['assetId'],
        'scenarioId': value['scenarioId'],
        'calculatedValue': value['calculatedValue'],
        'manualValue': value['manualValue'],
        'useManualValue': value['useManualValue'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

