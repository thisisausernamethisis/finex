/* tslint:disable */
/* eslint-disable */
/**
 * Finex Bot API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    growthValue?: number;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    kind?: AssetKindEnum;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    sourceTemplateId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Asset
     */
    isPublic?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Asset
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Asset
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const AssetKindEnum = {
    Regular: 'REGULAR',
    Template: 'TEMPLATE'
} as const;
export type AssetKindEnum = typeof AssetKindEnum[keyof typeof AssetKindEnum];


/**
 * Check if a given object implements the Asset interface.
 */
export function instanceOfAsset(value: object): value is Asset {
    return true;
}

export function AssetFromJSON(json: any): Asset {
    return AssetFromJSONTyped(json, false);
}

export function AssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Asset {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'growthValue': json['growthValue'] == null ? undefined : json['growthValue'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'kind': json['kind'] == null ? undefined : json['kind'],
        'sourceTemplateId': json['sourceTemplateId'] == null ? undefined : json['sourceTemplateId'],
        'isPublic': json['isPublic'] == null ? undefined : json['isPublic'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function AssetToJSON(json: any): Asset {
    return AssetToJSONTyped(json, false);
}

export function AssetToJSONTyped(value?: Asset | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'growthValue': value['growthValue'],
        'userId': value['userId'],
        'kind': value['kind'],
        'sourceTemplateId': value['sourceTemplateId'],
        'isPublic': value['isPublic'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

