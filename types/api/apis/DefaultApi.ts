/* tslint:disable */
/* eslint-disable */
/**
 * Finex Bot API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Asset,
  AssetAccess,
  AssetAccessCreate,
  AssetAccessRemove,
  AssetCreate,
  AssetUpdate,
  Card,
  CardCreate,
  CardUpdate,
  MatrixAnalysisRequest,
  MatrixAnalysisResult,
  MatrixPost202Response,
  PaginatedAssets,
  PaginatedScenarios,
  PaginatedThemeTemplates,
  Scenario,
  ScenarioCreate,
  ScenarioUpdate,
  SearchResult,
  Theme,
  ThemeCreate,
  ThemeTemplate,
  ThemeTemplateClone,
  ThemeTemplateCreate,
  ThemeTemplateUpdate,
  ThemeTemplatesGet400Response,
  ThemeTemplatesGet429Response,
  ThemeUpdate,
} from '../models/index';
import {
    AssetFromJSON,
    AssetToJSON,
    AssetAccessFromJSON,
    AssetAccessToJSON,
    AssetAccessCreateFromJSON,
    AssetAccessCreateToJSON,
    AssetAccessRemoveFromJSON,
    AssetAccessRemoveToJSON,
    AssetCreateFromJSON,
    AssetCreateToJSON,
    AssetUpdateFromJSON,
    AssetUpdateToJSON,
    CardFromJSON,
    CardToJSON,
    CardCreateFromJSON,
    CardCreateToJSON,
    CardUpdateFromJSON,
    CardUpdateToJSON,
    MatrixAnalysisRequestFromJSON,
    MatrixAnalysisRequestToJSON,
    MatrixAnalysisResultFromJSON,
    MatrixAnalysisResultToJSON,
    MatrixPost202ResponseFromJSON,
    MatrixPost202ResponseToJSON,
    PaginatedAssetsFromJSON,
    PaginatedAssetsToJSON,
    PaginatedScenariosFromJSON,
    PaginatedScenariosToJSON,
    PaginatedThemeTemplatesFromJSON,
    PaginatedThemeTemplatesToJSON,
    ScenarioFromJSON,
    ScenarioToJSON,
    ScenarioCreateFromJSON,
    ScenarioCreateToJSON,
    ScenarioUpdateFromJSON,
    ScenarioUpdateToJSON,
    SearchResultFromJSON,
    SearchResultToJSON,
    ThemeFromJSON,
    ThemeToJSON,
    ThemeCreateFromJSON,
    ThemeCreateToJSON,
    ThemeTemplateFromJSON,
    ThemeTemplateToJSON,
    ThemeTemplateCloneFromJSON,
    ThemeTemplateCloneToJSON,
    ThemeTemplateCreateFromJSON,
    ThemeTemplateCreateToJSON,
    ThemeTemplateUpdateFromJSON,
    ThemeTemplateUpdateToJSON,
    ThemeTemplatesGet400ResponseFromJSON,
    ThemeTemplatesGet400ResponseToJSON,
    ThemeTemplatesGet429ResponseFromJSON,
    ThemeTemplatesGet429ResponseToJSON,
    ThemeUpdateFromJSON,
    ThemeUpdateToJSON,
} from '../models/index';

export interface AssetsAssetIdAccessDeleteRequest {
    assetId: string;
    assetAccessRemove: AssetAccessRemove;
}

export interface AssetsAssetIdAccessGetRequest {
    assetId: string;
}

export interface AssetsAssetIdAccessPostRequest {
    assetId: string;
    assetAccessCreate: AssetAccessCreate;
}

export interface AssetsAssetIdClonePostRequest {
    assetId: string;
}

export interface AssetsAssetIdDeleteRequest {
    assetId: string;
}

export interface AssetsAssetIdGetRequest {
    assetId: string;
}

export interface AssetsAssetIdPutRequest {
    assetId: string;
    assetUpdate: AssetUpdate;
}

export interface AssetsAssetIdThemesGetRequest {
    assetId: string;
}

export interface AssetsAssetIdThemesPostRequest {
    assetId: string;
    themeCreate: ThemeCreate;
}

export interface AssetsGetRequest {
    page?: number;
    limit?: number;
    search?: string;
}

export interface AssetsPostRequest {
    assetCreate: AssetCreate;
}

export interface CardsCardIdDeleteRequest {
    cardId: string;
}

export interface CardsCardIdGetRequest {
    cardId: string;
}

export interface CardsCardIdPutRequest {
    cardId: string;
    cardUpdate: CardUpdate;
}

export interface MatrixGetRequest {
    assetId?: string;
    scenarioId?: string;
}

export interface MatrixPostRequest {
    matrixAnalysisRequest: MatrixAnalysisRequest;
}

export interface ScenariosGetRequest {
    page?: number;
    limit?: number;
    search?: string;
}

export interface ScenariosPostRequest {
    scenarioCreate: ScenarioCreate;
}

export interface ScenariosScenarioIdDeleteRequest {
    scenarioId: string;
}

export interface ScenariosScenarioIdGetRequest {
    scenarioId: string;
}

export interface ScenariosScenarioIdPutRequest {
    scenarioId: string;
    scenarioUpdate: ScenarioUpdate;
}

export interface SearchGetRequest {
    query: string;
    assetId?: string;
    scenarioId?: string;
    limit?: number;
}

export interface ThemeTemplatesGetRequest {
    page?: number;
    limit?: number;
    q?: string;
    mine?: boolean;
    publicOnly?: boolean;
}

export interface ThemeTemplatesIdClonePostRequest {
    id: string;
    themeTemplateClone: ThemeTemplateClone;
}

export interface ThemeTemplatesIdDeleteRequest {
    id: string;
}

export interface ThemeTemplatesIdGetRequest {
    id: string;
}

export interface ThemeTemplatesIdPutRequest {
    id: string;
    themeTemplateUpdate: ThemeTemplateUpdate;
}

export interface ThemeTemplatesPostRequest {
    themeTemplateCreate: ThemeTemplateCreate;
}

export interface ThemesThemeIdCardsGetRequest {
    themeId: string;
}

export interface ThemesThemeIdCardsPostRequest {
    themeId: string;
    cardCreate: CardCreate;
}

export interface ThemesThemeIdDeleteRequest {
    themeId: string;
}

export interface ThemesThemeIdGetRequest {
    themeId: string;
}

export interface ThemesThemeIdPutRequest {
    themeId: string;
    themeUpdate: ThemeUpdate;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Remove access from asset
     */
    async assetsAssetIdAccessDeleteRaw(requestParameters: AssetsAssetIdAccessDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetIdAccessDelete().'
            );
        }

        if (requestParameters['assetAccessRemove'] == null) {
            throw new runtime.RequiredError(
                'assetAccessRemove',
                'Required parameter "assetAccessRemove" was null or undefined when calling assetsAssetIdAccessDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets/{assetId}/access`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AssetAccessRemoveToJSON(requestParameters['assetAccessRemove']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove access from asset
     */
    async assetsAssetIdAccessDelete(requestParameters: AssetsAssetIdAccessDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetsAssetIdAccessDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List access grants for asset
     */
    async assetsAssetIdAccessGetRaw(requestParameters: AssetsAssetIdAccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetAccess>>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetIdAccessGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets/{assetId}/access`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetAccessFromJSON));
    }

    /**
     * List access grants for asset
     */
    async assetsAssetIdAccessGet(requestParameters: AssetsAssetIdAccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetAccess>> {
        const response = await this.assetsAssetIdAccessGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grant access to asset
     */
    async assetsAssetIdAccessPostRaw(requestParameters: AssetsAssetIdAccessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetAccess>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetIdAccessPost().'
            );
        }

        if (requestParameters['assetAccessCreate'] == null) {
            throw new runtime.RequiredError(
                'assetAccessCreate',
                'Required parameter "assetAccessCreate" was null or undefined when calling assetsAssetIdAccessPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets/{assetId}/access`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetAccessCreateToJSON(requestParameters['assetAccessCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetAccessFromJSON(jsonValue));
    }

    /**
     * Grant access to asset
     */
    async assetsAssetIdAccessPost(requestParameters: AssetsAssetIdAccessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetAccess> {
        const response = await this.assetsAssetIdAccessPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deep-clone an Asset template into the caller\'s workspace
     * Clone an asset template
     */
    async assetsAssetIdClonePostRaw(requestParameters: AssetsAssetIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetIdClonePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets/{assetId}/clone`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Deep-clone an Asset template into the caller\'s workspace
     * Clone an asset template
     */
    async assetsAssetIdClonePost(requestParameters: AssetsAssetIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetsAssetIdClonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete asset
     */
    async assetsAssetIdDeleteRaw(requestParameters: AssetsAssetIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete asset
     */
    async assetsAssetIdDelete(requestParameters: AssetsAssetIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetsAssetIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get asset by ID
     */
    async assetsAssetIdGetRaw(requestParameters: AssetsAssetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Get asset by ID
     */
    async assetsAssetIdGet(requestParameters: AssetsAssetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetsAssetIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update asset
     */
    async assetsAssetIdPutRaw(requestParameters: AssetsAssetIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetIdPut().'
            );
        }

        if (requestParameters['assetUpdate'] == null) {
            throw new runtime.RequiredError(
                'assetUpdate',
                'Required parameter "assetUpdate" was null or undefined when calling assetsAssetIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetUpdateToJSON(requestParameters['assetUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Update asset
     */
    async assetsAssetIdPut(requestParameters: AssetsAssetIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetsAssetIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List themes for asset
     */
    async assetsAssetIdThemesGetRaw(requestParameters: AssetsAssetIdThemesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Theme>>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetIdThemesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets/{assetId}/themes`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ThemeFromJSON));
    }

    /**
     * List themes for asset
     */
    async assetsAssetIdThemesGet(requestParameters: AssetsAssetIdThemesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Theme>> {
        const response = await this.assetsAssetIdThemesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create theme for asset
     */
    async assetsAssetIdThemesPostRaw(requestParameters: AssetsAssetIdThemesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Theme>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetIdThemesPost().'
            );
        }

        if (requestParameters['themeCreate'] == null) {
            throw new runtime.RequiredError(
                'themeCreate',
                'Required parameter "themeCreate" was null or undefined when calling assetsAssetIdThemesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets/{assetId}/themes`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeCreateToJSON(requestParameters['themeCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeFromJSON(jsonValue));
    }

    /**
     * Create theme for asset
     */
    async assetsAssetIdThemesPost(requestParameters: AssetsAssetIdThemesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Theme> {
        const response = await this.assetsAssetIdThemesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List assets
     */
    async assetsGetRaw(requestParameters: AssetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAssets>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAssetsFromJSON(jsonValue));
    }

    /**
     * List assets
     */
    async assetsGet(requestParameters: AssetsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAssets> {
        const response = await this.assetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create asset
     */
    async assetsPostRaw(requestParameters: AssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['assetCreate'] == null) {
            throw new runtime.RequiredError(
                'assetCreate',
                'Required parameter "assetCreate" was null or undefined when calling assetsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/assets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetCreateToJSON(requestParameters['assetCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Create asset
     */
    async assetsPost(requestParameters: AssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete card
     */
    async cardsCardIdDeleteRaw(requestParameters: CardsCardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cardId'] == null) {
            throw new runtime.RequiredError(
                'cardId',
                'Required parameter "cardId" was null or undefined when calling cardsCardIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cards/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters['cardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete card
     */
    async cardsCardIdDelete(requestParameters: CardsCardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cardsCardIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get card by ID
     */
    async cardsCardIdGetRaw(requestParameters: CardsCardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters['cardId'] == null) {
            throw new runtime.RequiredError(
                'cardId',
                'Required parameter "cardId" was null or undefined when calling cardsCardIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cards/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters['cardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardFromJSON(jsonValue));
    }

    /**
     * Get card by ID
     */
    async cardsCardIdGet(requestParameters: CardsCardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card> {
        const response = await this.cardsCardIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update card
     */
    async cardsCardIdPutRaw(requestParameters: CardsCardIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters['cardId'] == null) {
            throw new runtime.RequiredError(
                'cardId',
                'Required parameter "cardId" was null or undefined when calling cardsCardIdPut().'
            );
        }

        if (requestParameters['cardUpdate'] == null) {
            throw new runtime.RequiredError(
                'cardUpdate',
                'Required parameter "cardUpdate" was null or undefined when calling cardsCardIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cards/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters['cardId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CardUpdateToJSON(requestParameters['cardUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardFromJSON(jsonValue));
    }

    /**
     * Update card
     */
    async cardsCardIdPut(requestParameters: CardsCardIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card> {
        const response = await this.cardsCardIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Server-Sent Events (SSE) endpoint for real-time updates
     */
    async eventsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Server-Sent Events (SSE) endpoint for real-time updates
     */
    async eventsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.eventsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get matrix analysis results
     */
    async matrixGetRaw(requestParameters: MatrixGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MatrixAnalysisResult>>> {
        const queryParameters: any = {};

        if (requestParameters['assetId'] != null) {
            queryParameters['assetId'] = requestParameters['assetId'];
        }

        if (requestParameters['scenarioId'] != null) {
            queryParameters['scenarioId'] = requestParameters['scenarioId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/matrix`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MatrixAnalysisResultFromJSON));
    }

    /**
     * Get matrix analysis results
     */
    async matrixGet(requestParameters: MatrixGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MatrixAnalysisResult>> {
        const response = await this.matrixGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request matrix analysis
     */
    async matrixPostRaw(requestParameters: MatrixPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatrixPost202Response>> {
        if (requestParameters['matrixAnalysisRequest'] == null) {
            throw new runtime.RequiredError(
                'matrixAnalysisRequest',
                'Required parameter "matrixAnalysisRequest" was null or undefined when calling matrixPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/matrix`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MatrixAnalysisRequestToJSON(requestParameters['matrixAnalysisRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatrixPost202ResponseFromJSON(jsonValue));
    }

    /**
     * Request matrix analysis
     */
    async matrixPost(requestParameters: MatrixPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatrixPost202Response> {
        const response = await this.matrixPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List scenarios
     */
    async scenariosGetRaw(requestParameters: ScenariosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedScenarios>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scenarios`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedScenariosFromJSON(jsonValue));
    }

    /**
     * List scenarios
     */
    async scenariosGet(requestParameters: ScenariosGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedScenarios> {
        const response = await this.scenariosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create scenario
     */
    async scenariosPostRaw(requestParameters: ScenariosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Scenario>> {
        if (requestParameters['scenarioCreate'] == null) {
            throw new runtime.RequiredError(
                'scenarioCreate',
                'Required parameter "scenarioCreate" was null or undefined when calling scenariosPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scenarios`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScenarioCreateToJSON(requestParameters['scenarioCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioFromJSON(jsonValue));
    }

    /**
     * Create scenario
     */
    async scenariosPost(requestParameters: ScenariosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Scenario> {
        const response = await this.scenariosPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete scenario
     */
    async scenariosScenarioIdDeleteRaw(requestParameters: ScenariosScenarioIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scenarioId'] == null) {
            throw new runtime.RequiredError(
                'scenarioId',
                'Required parameter "scenarioId" was null or undefined when calling scenariosScenarioIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scenarios/{scenarioId}`.replace(`{${"scenarioId"}}`, encodeURIComponent(String(requestParameters['scenarioId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete scenario
     */
    async scenariosScenarioIdDelete(requestParameters: ScenariosScenarioIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scenariosScenarioIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get scenario by ID
     */
    async scenariosScenarioIdGetRaw(requestParameters: ScenariosScenarioIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Scenario>> {
        if (requestParameters['scenarioId'] == null) {
            throw new runtime.RequiredError(
                'scenarioId',
                'Required parameter "scenarioId" was null or undefined when calling scenariosScenarioIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scenarios/{scenarioId}`.replace(`{${"scenarioId"}}`, encodeURIComponent(String(requestParameters['scenarioId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioFromJSON(jsonValue));
    }

    /**
     * Get scenario by ID
     */
    async scenariosScenarioIdGet(requestParameters: ScenariosScenarioIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Scenario> {
        const response = await this.scenariosScenarioIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update scenario
     */
    async scenariosScenarioIdPutRaw(requestParameters: ScenariosScenarioIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Scenario>> {
        if (requestParameters['scenarioId'] == null) {
            throw new runtime.RequiredError(
                'scenarioId',
                'Required parameter "scenarioId" was null or undefined when calling scenariosScenarioIdPut().'
            );
        }

        if (requestParameters['scenarioUpdate'] == null) {
            throw new runtime.RequiredError(
                'scenarioUpdate',
                'Required parameter "scenarioUpdate" was null or undefined when calling scenariosScenarioIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scenarios/{scenarioId}`.replace(`{${"scenarioId"}}`, encodeURIComponent(String(requestParameters['scenarioId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ScenarioUpdateToJSON(requestParameters['scenarioUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScenarioFromJSON(jsonValue));
    }

    /**
     * Update scenario
     */
    async scenariosScenarioIdPut(requestParameters: ScenariosScenarioIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Scenario> {
        const response = await this.scenariosScenarioIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search across assets and scenarios
     */
    async searchGetRaw(requestParameters: SearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResult>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling searchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['assetId'] != null) {
            queryParameters['assetId'] = requestParameters['assetId'];
        }

        if (requestParameters['scenarioId'] != null) {
            queryParameters['scenarioId'] = requestParameters['scenarioId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultFromJSON));
    }

    /**
     * Search across assets and scenarios
     */
    async searchGet(requestParameters: SearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResult>> {
        const response = await this.searchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Browse available theme templates
     * List theme templates
     */
    async themeTemplatesGetRaw(requestParameters: ThemeTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedThemeTemplates>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['mine'] != null) {
            queryParameters['mine'] = requestParameters['mine'];
        }

        if (requestParameters['publicOnly'] != null) {
            queryParameters['publicOnly'] = requestParameters['publicOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/theme-templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedThemeTemplatesFromJSON(jsonValue));
    }

    /**
     * Browse available theme templates
     * List theme templates
     */
    async themeTemplatesGet(requestParameters: ThemeTemplatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedThemeTemplates> {
        const response = await this.themeTemplatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clone a theme template into the specified asset
     * Clone a theme template
     */
    async themeTemplatesIdClonePostRaw(requestParameters: ThemeTemplatesIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling themeTemplatesIdClonePost().'
            );
        }

        if (requestParameters['themeTemplateClone'] == null) {
            throw new runtime.RequiredError(
                'themeTemplateClone',
                'Required parameter "themeTemplateClone" was null or undefined when calling themeTemplatesIdClonePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/theme-templates/{id}/clone`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeTemplateCloneToJSON(requestParameters['themeTemplateClone']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Clone a theme template into the specified asset
     * Clone a theme template
     */
    async themeTemplatesIdClonePost(requestParameters: ThemeTemplatesIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.themeTemplatesIdClonePostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a theme template
     * Delete theme template
     */
    async themeTemplatesIdDeleteRaw(requestParameters: ThemeTemplatesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling themeTemplatesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/theme-templates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a theme template
     * Delete theme template
     */
    async themeTemplatesIdDelete(requestParameters: ThemeTemplatesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.themeTemplatesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a single theme template by ID
     * Get theme template by ID
     */
    async themeTemplatesIdGetRaw(requestParameters: ThemeTemplatesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeTemplate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling themeTemplatesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/theme-templates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeTemplateFromJSON(jsonValue));
    }

    /**
     * Retrieve a single theme template by ID
     * Get theme template by ID
     */
    async themeTemplatesIdGet(requestParameters: ThemeTemplatesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeTemplate> {
        const response = await this.themeTemplatesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing theme template
     * Update theme template
     */
    async themeTemplatesIdPutRaw(requestParameters: ThemeTemplatesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeTemplate>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling themeTemplatesIdPut().'
            );
        }

        if (requestParameters['themeTemplateUpdate'] == null) {
            throw new runtime.RequiredError(
                'themeTemplateUpdate',
                'Required parameter "themeTemplateUpdate" was null or undefined when calling themeTemplatesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/theme-templates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeTemplateUpdateToJSON(requestParameters['themeTemplateUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeTemplateFromJSON(jsonValue));
    }

    /**
     * Update an existing theme template
     * Update theme template
     */
    async themeTemplatesIdPut(requestParameters: ThemeTemplatesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeTemplate> {
        const response = await this.themeTemplatesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publish a new theme template
     * Create theme template
     */
    async themeTemplatesPostRaw(requestParameters: ThemeTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeTemplate>> {
        if (requestParameters['themeTemplateCreate'] == null) {
            throw new runtime.RequiredError(
                'themeTemplateCreate',
                'Required parameter "themeTemplateCreate" was null or undefined when calling themeTemplatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/theme-templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeTemplateCreateToJSON(requestParameters['themeTemplateCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeTemplateFromJSON(jsonValue));
    }

    /**
     * Publish a new theme template
     * Create theme template
     */
    async themeTemplatesPost(requestParameters: ThemeTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeTemplate> {
        const response = await this.themeTemplatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List cards for theme
     */
    async themesThemeIdCardsGetRaw(requestParameters: ThemesThemeIdCardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Card>>> {
        if (requestParameters['themeId'] == null) {
            throw new runtime.RequiredError(
                'themeId',
                'Required parameter "themeId" was null or undefined when calling themesThemeIdCardsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/themes/{themeId}/cards`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters['themeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CardFromJSON));
    }

    /**
     * List cards for theme
     */
    async themesThemeIdCardsGet(requestParameters: ThemesThemeIdCardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Card>> {
        const response = await this.themesThemeIdCardsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create card for theme
     */
    async themesThemeIdCardsPostRaw(requestParameters: ThemesThemeIdCardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters['themeId'] == null) {
            throw new runtime.RequiredError(
                'themeId',
                'Required parameter "themeId" was null or undefined when calling themesThemeIdCardsPost().'
            );
        }

        if (requestParameters['cardCreate'] == null) {
            throw new runtime.RequiredError(
                'cardCreate',
                'Required parameter "cardCreate" was null or undefined when calling themesThemeIdCardsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/themes/{themeId}/cards`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters['themeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CardCreateToJSON(requestParameters['cardCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardFromJSON(jsonValue));
    }

    /**
     * Create card for theme
     */
    async themesThemeIdCardsPost(requestParameters: ThemesThemeIdCardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card> {
        const response = await this.themesThemeIdCardsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete theme
     */
    async themesThemeIdDeleteRaw(requestParameters: ThemesThemeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['themeId'] == null) {
            throw new runtime.RequiredError(
                'themeId',
                'Required parameter "themeId" was null or undefined when calling themesThemeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/themes/{themeId}`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters['themeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete theme
     */
    async themesThemeIdDelete(requestParameters: ThemesThemeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.themesThemeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get theme by ID
     */
    async themesThemeIdGetRaw(requestParameters: ThemesThemeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Theme>> {
        if (requestParameters['themeId'] == null) {
            throw new runtime.RequiredError(
                'themeId',
                'Required parameter "themeId" was null or undefined when calling themesThemeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/themes/{themeId}`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters['themeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeFromJSON(jsonValue));
    }

    /**
     * Get theme by ID
     */
    async themesThemeIdGet(requestParameters: ThemesThemeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Theme> {
        const response = await this.themesThemeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update theme
     */
    async themesThemeIdPutRaw(requestParameters: ThemesThemeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Theme>> {
        if (requestParameters['themeId'] == null) {
            throw new runtime.RequiredError(
                'themeId',
                'Required parameter "themeId" was null or undefined when calling themesThemeIdPut().'
            );
        }

        if (requestParameters['themeUpdate'] == null) {
            throw new runtime.RequiredError(
                'themeUpdate',
                'Required parameter "themeUpdate" was null or undefined when calling themesThemeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/themes/{themeId}`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters['themeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeUpdateToJSON(requestParameters['themeUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeFromJSON(jsonValue));
    }

    /**
     * Update theme
     */
    async themesThemeIdPut(requestParameters: ThemesThemeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Theme> {
        const response = await this.themesThemeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
