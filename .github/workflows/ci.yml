name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  tests-unit:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      NODE_ENV: test
      CLERK_SECRET_KEY: test_clerk_secret_key
      CLERK_PUBLISHABLE_KEY: test_clerk_publishable_key
      OPENAI_API_KEY: test_openai_key
      DYNAMIC_ALPHA_GPT: 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm prisma migrate deploy --skip-generate
      - run: pnpm test:unit:db
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-unit
          path: coverage/
          retention-days: 7
  
  ragas-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [tests-unit]
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'
      - run: pnpm install
      - run: node --require ts-node/register scripts/ragas/smoke.ts
  
  tests-contract:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finex_test?schema=public
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finex_test?schema=public
      NODE_ENV: test
      CLERK_SECRET_KEY: test_clerk_secret_key
      CLERK_PUBLISHABLE_KEY: test_clerk_publishable_key
      OPENAI_API_KEY: test_openai_key
      DYNAMIC_ALPHA_GPT: 'false'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finex_test
        ports:
          - 5432:5432
        # Health check to ensure postgres is ready before tests run
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npx prisma generate --schema=prisma/schema.test.prisma
      - run: npx prisma migrate deploy
      - run: npm run test:contract
  
  tests-e2e:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finex_test?schema=public
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finex_test?schema=public
      NODE_ENV: test
      CLERK_SECRET_KEY: test_clerk_secret_key
      CLERK_PUBLISHABLE_KEY: test_clerk_publishable_key
      OPENAI_API_KEY: test_openai_key
      DYNAMIC_ALPHA_GPT: 'false'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finex_test
        ports:
          - 5432:5432
        # Health check to ensure postgres is ready before tests run
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npx prisma generate
      - run: npx prisma migrate deploy
      - run: npm run test:e2e
  
  lint:
    runs-on: ubuntu-latest
    needs: [tests-unit]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - name: Check API schema differences 
        run: npm run validate:api
  
  ragas-eval:
    needs: [tests-unit, ragas-smoke]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install Python dependencies for RAGAS
        run: |
          python -m pip install --upgrade pip
          pip install ragas pandas langchain llama-index
      - name: Install Node dependencies
        run: npm ci
      - name: Run RAG evaluation
        run: npm run rag:eval
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - name: Upload RAGAS results
        uses: actions/upload-artifact@v3
        with:
          name: ragas-results
          path: ragas-results/
          retention-days: 7

  build:
    needs: [tests-unit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
